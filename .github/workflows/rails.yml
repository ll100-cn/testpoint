name: Rails

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  cleanup-runs:
    runs-on: ubuntu-latest
    steps:
      - uses: rokroskar/workflow-run-cleanup-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: "!startsWith(github.ref, 'refs/tags/') && github.ref != 'refs/heads/master'"

  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:12
        ports: ["5432:5432"]
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
        env: { POSTGRES_PASSWORD: postgres }

      redis:
        image: redis:6
        ports: ["6379:6379"]

      memcached:
        image: memcached:1.6
        ports: ["11211:11211"]

    steps:
      # ==================
      # Container Setup
      # ------------------
      - uses: ruby/setup-ruby@v1
        with: { ruby-version: 2.7.8 }
      - run: gem install bundler -v 2.4.20

      - uses: actions/setup-node@v4
        with: { node-version: '20.x' }
      - run: npm install -g yarn

      # ==================
      # Project Setup
      # ------------------
      - uses: actions/checkout@v4
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v4
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - uses: actions/cache@v4
        id: gem-cache
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-

      - run: ./setup.sh
      - run: ./prepare.sh
      - run: ./test.sh
      # - run: bundle exec rake coverage
      # - uses: actions/upload-artifact@v4
      #   if: failure()
      #   with: { name: coverage, path: ./coverage }
